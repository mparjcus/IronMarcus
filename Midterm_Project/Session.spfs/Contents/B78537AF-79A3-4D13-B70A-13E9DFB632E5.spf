<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>ContentFilters</key>
	<dict/>
	<key>auto_connect</key>
	<true/>
	<key>data</key>
	<dict>
		<key>connection</key>
		<dict>
			<key>database</key>
			<string>house_price_regression</string>
			<key>host</key>
			<string>127.0.0.1</string>
			<key>kcid</key>
			<string>1820154895107902075</string>
			<key>name</key>
			<string>localhost</string>
			<key>rdbms_type</key>
			<string>mysql</string>
			<key>sslCACertFileLocation</key>
			<string></string>
			<key>sslCACertFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslCertificateFileLocation</key>
			<string></string>
			<key>sslCertificateFileLocationEnabled</key>
			<integer>0</integer>
			<key>sslKeyFileLocation</key>
			<string></string>
			<key>sslKeyFileLocationEnabled</key>
			<integer>0</integer>
			<key>type</key>
			<string>SPTCPIPConnection</string>
			<key>useSSL</key>
			<integer>0</integer>
			<key>user</key>
			<string>root</string>
		</dict>
		<key>session</key>
		<dict>
			<key>connectionEncoding</key>
			<string>utf8mb4</string>
			<key>contentFilterV2</key>
			<dict>
				<key>children</key>
				<array/>
				<key>filterClass</key>
				<string>groupNode</string>
				<key>isConjunction</key>
				<true/>
			</dict>
			<key>contentPageNumber</key>
			<integer>1</integer>
			<key>contentSelection</key>
			<data>
			YnBsaXN0MDDUAQIDBAUGBwpYJHZlcnNpb25ZJGFyY2hpdmVyVCR0
			b3BYJG9iamVjdHMSAAGGoF8QD05TS2V5ZWRBcmNoaXZlctEICVRk
			YXRhgAGoCwwXGBkaHiVVJG51bGzTDQ4PEBMWV05TLmtleXNaTlMu
			b2JqZWN0c1YkY2xhc3OiERKAAoADohQVgASABYAHVHR5cGVUcm93
			c18QHVNlbGVjdGlvbkRldGFpbFR5cGVOU0luZGV4U2V00hsPHB1c
			TlNSYW5nZUNvdW50EACABtIfICEiWiRjbGFzc25hbWVYJGNsYXNz
			ZXNaTlNJbmRleFNldKIjJFpOU0luZGV4U2V0WE5TT2JqZWN00h8g
			JidcTlNEaWN0aW9uYXJ5oiYkAAgAEQAaACQAKQAyADcASQBMAFEA
			UwBcAGIAaQBxAHwAgwCGAIgAigCNAI8AkQCTAJgAnQC9AMIAzwDR
			ANMA2ADjAOwA9wD6AQUBDgETASAAAAAAAAACAQAAAAAAAAAoAAAA
			AAAAAAAAAAAAAAABIw==
			</data>
			<key>contentSortColIsAsc</key>
			<true/>
			<key>contentViewport</key>
			<string>{{176, 0}, {1066, 627}}</string>
			<key>isToolbarVisible</key>
			<true/>
			<key>queries</key>
			<string>drop database if exists house_price_regression;

create database if not exists house_price_regression;
use house_price_regression;

drop table if exists house_price_data;

CREATE TABLE house_price_data (
  `id` varchar(24) NOT NULL,
  `date` varchar(24) DEFAULT NULL,
  `bedrooms` int(4) DEFAULT NULL,
  `bathrooms` float DEFAULT NULL,
  `sqft_living` float DEFAULT NULL,
  `sqft_lot` float DEFAULT NULL,
  `floors` float DEFAULT NULL,
  `waterfront` int(4) DEFAULT NULL,
  `view` int(4) DEFAULT NULL,
  `condition` int(4) DEFAULT NULL,
  `grade` int(4) DEFAULT NULL,
  `sqft_above` float DEFAULT NULL,
  `sqft_basement` float DEFAULT NULL,
  `yr_built` int(11) DEFAULT NULL,
  `yr_renovated` int(11) DEFAULT NULL,
  `zip_code` int(11) DEFAULT NULL,
  `lat` float DEFAULT NULL,
  `lon` float DEFAULT NULL,
  `sqft_living15` float DEFAULT NULL,
  `sqft_lot15` float DEFAULT NULL,
  `price` int(12) DEFAULT NULL
  -- CONSTRAINT PRIMARY KEY (`id`)  -- constraint keyword is optional but its a good practice
);


SHOW VARIABLES LIKE 'local_infile';
SET GLOBAL local_infile = 1;

load data local infile '/Users/marcus/Documents/Projects/Ironhack/IronMarcus/Midterm_Project/regression_data_clean_too_many_males.csv'
into table house_price_data
fields terminated BY ';'
ignore 1 Rows;

-- duplicates

select id, date, price, rank() over (partition by id order by price) as Ranks
from house_price_data
where id in (select id
				from house_price_data
				group by id
				having count(id) &gt; 1)
;

-- delete all duplicate Property ids
	
select id from
(select id, date, rank() over(partition by id order by price) as Ranks
from house_price_data
where id in (select id
from house_price_data group by id having count(id)&gt;1))Ranks
where Ranks= 1
group by id
having count(id) = 1
;		

-- 4
select *
from house_price_data;

-- 5 
Alter table house_price_data
DROP COLUMN date;

-- 6
select count(*)
from house_price_data;

-- 7
select distinct(bedrooms)
from house_price_data
;
select distinct(bathrooms)
from house_price_data
;
select distinct(floors)
from house_price_data
;
select distinct(house_price_data.condition)
from house_price_data
;
select distinct(grade)
from house_price_data
;

-- 8 
select *
from house_price_data
order by price DESC
limit 10;

-- 9 
select avg(price)
from house_price_data
;

-- 10
select bedrooms, avg(price) as Average_price
from house_price_data
group by bedrooms
order by bedrooms;

select sqft_living, avg(price) as Average_price
from house_price_data
group by sqft_living
order by sqft_living;

select waterfront, avg(price) as Average_price
from house_price_data
group by waterfront
order by waterfront;

select house_price_data.condition, avg(grade)
from house_price_data
group by house_price_data.condition
order by house_price_data.condition;

-- 11
select *
from house_price_data
where bedrooms in (3,4)
and bathrooms &gt;= 3
and floors = 1
and house_price_data.condition &gt;= 3
and grade &gt;= 5
and price &lt; 300000
order by price
;

-- 12
 

select * -- bedrooms, avg(price) as Average_price, avg(price)-lag(avg(price),1) over (partition by bedrooms order by id) as Difference
from house_price_data
where bedrooms &gt; 10
;

select zip_code, count(id), avg(price)
from house_price_data
group by zip_code
order by avg(price) desc;

select view, avg(price)
from house_price_data
group by view;

select *
from house_price_data
where sqft_lot15 = 0;

select distinct(date)
from house_price_data;

select distinct(yr_renovated)
from house_price_data
order by yr_renovated;

select *
from house_price_data
where bedrooms &gt; 6
or bathrooms &gt;= 5;








</string>
			<key>table</key>
			<string>house_price_data</string>
			<key>view</key>
			<string>SP_VIEW_CUSTOMQUERY</string>
			<key>windowVerticalDividerPosition</key>
			<real>200</real>
		</dict>
	</dict>
	<key>encrypted</key>
	<false/>
	<key>format</key>
	<string>connection</string>
	<key>queryFavorites</key>
	<array/>
	<key>queryHistory</key>
	<array>
		<string>select *
from house_price_data
where bedrooms &gt; 6
or bathrooms &gt;= 5</string>
		<string>select *
from house_price_data
where bedrooms &gt; 6
or bathrooms &gt;= 6</string>
		<string>select *
from house_price_data
where bedrooms &gt; 6
and bathrooms &gt;= 6</string>
		<string>-- 12
 

select * -- bedrooms, avg(price) as Average_price, avg(price)-lag(avg(price),1) over (partition by bedrooms order by id) as Difference
from house_price_data
where bedrooms &gt; 10</string>
		<string>-- 12
 

select * -- bedrooms, avg(price) as Average_price, avg(price)-lag(avg(price),1) over (partition by bedrooms order by id) as Difference
from house_price_data
group by bedrooms
having bedrooms&gt;10</string>
		<string>select distinct(yr_renovated)
from house_price_data
order by yr_renovated</string>
		<string>select distinct(yr_renovated)
from house_price_data</string>
		<string>select distinct(date)
from house_price_data</string>
		<string>select zip_code, count(id), avg(price)
from house_price_data
group by zip_code
order by avg(price) desc</string>
		<string>select zip_code, count(id), avg(price)
from house_price_data
group by zip_code
order by avg(price) desc,count(id) desc</string>
		<string>select zip_code, count(id), avg(price)
from house_price_data
group by zip_code
order by avg(price),count(id) desc</string>
		<string>select zip_code, count(id), avg(price)
from house_price_data
group by zip_code
order by count(id) desc</string>
		<string>select *
from house_price_data
where sqft_lot15 = 0</string>
		<string>select *
from house_price_data
where sqft_living15 = 0</string>
		<string>select *
from hous_price_data
where sqft_living15 = 0</string>
		<string>select view, avg(price)
from house_price_data
group by view</string>
		<string>select zip_code, count(id) 
from house_price_data
group by zip_code
order by count(id) desc</string>
		<string>select zip_code, count(id) 
from house_price_data
group by zip_code
order by count(id)</string>
		<string>select zip_code, count(id) 
from house_price_data
group by zip_code
order by zip_code</string>
		<string>select distinct(zip_code)
from house_price_data
order by zip_code</string>
	</array>
	<key>rdbms_type</key>
	<string>mysql</string>
	<key>rdbms_version</key>
	<string>8.0.22</string>
	<key>version</key>
	<integer>1</integer>
</dict>
</plist>
